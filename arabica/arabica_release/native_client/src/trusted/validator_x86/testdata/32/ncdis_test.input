# This is a simple test file to see if we have things working.
# When run in self documenting mode and command free lines,
# are echoed to the output.
#
# Lines with command line options (up to and including the pound sign) are
# also copied to output. Application (ncdis) is then run on those options,
# generating corresponding output. It is assume that the text after the
# pound sign is the output generated by ncdis. Hence, this file is self
# documenting in the sense that the input matches the output.
#
# Note: Useful command line options are:
#
#   -b=XX   Specifies a (one byte) hexidecimal value, defining a byte in
#           the sequence of bytes (defining the instruction to translate).
#           This option may be repeated up to 15 times.
#   -pc=XXXXXXXX
#           Specifies the value of the program counter, when it is pointing
#           to the instruction to be decoded. In not specified, the program
#           counter is assumed to be zero.
#
# Note: This file tests x86-32 instructions.

-b=55                                                       # 0:	55                  	push %ebp
-b=8d -b=74 -b=26 -b=00                                     # 0:	8d 74 26 00         	lea %esi, 0x0[%esi]
-pc=80483f8 -b=e8 -b=ff -b=fe -b=ff -b=ff                   # 80483f8:	e8 ff fe ff ff      	call 0x80482fc

# Check move immediates (b8-bf).
-b=b8 -b=88 -b=77 -b=66 -b=55                               # 0:	b8 88 77 66 55      	mov %eax, 0x55667788
-b=b9 -b=88 -b=77 -b=66 -b=55                               # 0:	b9 88 77 66 55      	mov %ecx, 0x55667788
-b=ba -b=88 -b=77 -b=66 -b=55                               # 0:	ba 88 77 66 55      	mov %edx, 0x55667788
-b=bb -b=88 -b=77 -b=66 -b=55                               # 0:	bb 88 77 66 55      	mov %ebx, 0x55667788
-b=bc -b=88 -b=77 -b=66 -b=55                               # 0:	bc 88 77 66 55      	mov %esp, 0x55667788
-b=bd -b=88 -b=77 -b=66 -b=55                               # 0:	bd 88 77 66 55      	mov %ebp, 0x55667788
-b=be -b=88 -b=77 -b=66 -b=55                               # 0:	be 88 77 66 55      	mov %esi, 0x55667788
-b=bf -b=88 -b=77 -b=66 -b=55                               # 0:	bf 88 77 66 55      	mov %edi, 0x55667788

-b=66 -b=b8 -b=88 -b=77                                     # 0:	66 b8 88 77         	mov %eax, 0x7788
-b=66 -b=b9 -b=88 -b=77                                     # 0:	66 b9 88 77         	mov %ecx, 0x7788
-b=66 -b=ba -b=88 -b=77                                     # 0:	66 ba 88 77         	mov %edx, 0x7788
-b=66 -b=bb -b=88 -b=77                                     # 0:	66 bb 88 77         	mov %ebx, 0x7788
-b=66 -b=bc -b=88 -b=77                                     # 0:	66 bc 88 77         	mov %esp, 0x7788
-b=66 -b=bd -b=88 -b=77                                     # 0:	66 bd 88 77         	mov %ebp, 0x7788
-b=66 -b=be -b=88 -b=77                                     # 0:	66 be 88 77         	mov %esi, 0x7788
-b=66 -b=bf -b=88 -b=77                                     # 0:	66 bf 88 77         	mov %edi, 0x7788

-b=67 -b=b8 -b=88 -b=77 -b=66 -b=55                         # 0:	67 b8 88 77 66 55   	mov %eax, 0x55667788
-b=67 -b=bf -b=88 -b=77 -b=66 -b=55                         # 0:	67 bf 88 77 66 55   	mov %edi, 0x55667788

# Check direct moves on 32-bit constant addresses.
-b=a0 -b=44 -b=33 -b=22 -b=11                               # 0:	a0 44 33 22 11      	mov %al, [0x11223344]
# Note: The following entry should use %ax instead of %eax
-b=66 -b=a1 -b=44 -b=33 -b=22 -b=11                         # 0:	66 a1 44 33 22 11   	mov %eax, [0x11223344]
-b=a1 -b=44 -b=33 -b=22 -b=11                               # 0:	a1 44 33 22 11      	mov %eax, [0x11223344]
-b=a2 -b=44 -b=33 -b=22 -b=11                               # 0:	a2 44 33 22 11      	mov [0x11223344], %al
# Note: The following entry should use %ax instead of %eax
-b=66 -b=a3 -b=44 -b=33 -b=22 -b=11                         # 0:	66 a3 44 33 22 11   	mov [0x11223344], %eax
-b=a3 -b=44 -b=33 -b=22 -b=11                               # 0:	a3 44 33 22 11      	mov [0x11223344], %eax

# The following don't print out the right syntax for matched instructions,
# and is intended to show the difference between the -use_iter=true and
# -use_iter=false cases.
-b=00 -b=00                                    # 0:	00 00               	add [%eax], %eax
-b=00 -b=c0                                    # 0:	00 c0               	add %eax, %eax
-b=01 -b=c0                                    # 0:	01 c0               	add %eax, %eax
-b=03 -b=18                                    # 0:	03 18               	add %ebx, [%eax]
-b=03 -b=1d -b=20 -b=00 -b=00 -b=00            # 0:	03 1d 20 00 00 00   	add %ebx, [0x20]
-b=02 -b=04 -b=00                              # 0:	02 04 00            	add %eax, [%eax + %eax]
