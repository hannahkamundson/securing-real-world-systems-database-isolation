# This is a simple test file to see if we have things working.
# When run in self documenting mode and command free lines,
# are echoed to the output.
#
# Lines with command line options (up to and including the pound sign) are
# also copied to output. Application (ncdis) is then run on those options,
# generating corresponding output. It is assume that the text after the
# pound sign is the output generated by ncdis. Hence, this file is self documenting
# in the sense that the input matches the output.
#
# Note: Useful command line options are:
#
#   -b=XX   Specifies a (one byte) hexidecimal value, defining a byte in the sequence
#           of bytes (defining the instruction to translate). This option may be repeated
#           up to 15 times.
#   -pc=XXXXXXXX
#           Specifies the value of the program counter, when it is pointing to the instruction
#           to be decoded. In not specified, the program counter is assumed to be zero.
#
# Note: This file tests x86-64 instructions.

-b=31 -b=ed                                                 # 0:	31 ed               	xor %rbp, %rbp

# Check move immediates (b8-bf).
-b=b8 -b=88 -b=77 -b=66 -b=55                               # 0:	b8 88 77 66 55      	mov %eax, 0x55667788
-b=b9 -b=88 -b=77 -b=66 -b=55                               # 0:	b9 88 77 66 55      	mov %ecx, 0x55667788
-b=ba -b=88 -b=77 -b=66 -b=55                               # 0:	ba 88 77 66 55      	mov %edx, 0x55667788
-b=bb -b=88 -b=77 -b=66 -b=55                               # 0:	bb 88 77 66 55      	mov %ebx, 0x55667788
-b=bc -b=88 -b=77 -b=66 -b=55                               # 0:	bc 88 77 66 55      	mov %esp, 0x55667788
-b=bd -b=88 -b=77 -b=66 -b=55                               # 0:	bd 88 77 66 55      	mov %ebp, 0x55667788
-b=be -b=88 -b=77 -b=66 -b=55                               # 0:	be 88 77 66 55      	mov %esi, 0x55667788
-b=bf -b=88 -b=77 -b=66 -b=55                               # 0:	bf 88 77 66 55      	mov %edi, 0x55667788

-b=41 -b=b8 -b=44 -b=33 -b=22 -b=11                         # 0:	41 b8 44 33 22 11   	mov %eax, 0x11223344
-b=41 -b=bf -b=44 -b=33 -b=22 -b=11                         # 0:	41 bf 44 33 22 11   	mov %edi, 0x11223344

-b=66 -b=b8 -b=88 -b=77                                     # 0:	66 b8 88 77         	mov %eax, 0x7788
-b=66 -b=b9 -b=88 -b=77                                     # 0:	66 b9 88 77         	mov %ecx, 0x7788
-b=66 -b=ba -b=88 -b=77                                     # 0:	66 ba 88 77         	mov %edx, 0x7788
-b=66 -b=bb -b=88 -b=77                                     # 0:	66 bb 88 77         	mov %ebx, 0x7788
-b=66 -b=bc -b=88 -b=77                                     # 0:	66 bc 88 77         	mov %esp, 0x7788
-b=66 -b=bd -b=88 -b=77                                     # 0:	66 bd 88 77         	mov %ebp, 0x7788
-b=66 -b=be -b=88 -b=77                                     # 0:	66 be 88 77         	mov %esi, 0x7788
-b=66 -b=bf -b=88 -b=77                                     # 0:	66 bf 88 77         	mov %edi, 0x7788

# Note: The following don't print out the proper register name.
-b=66 -b=41 -b=b8 -b=22 -b=11                               # 0:	66 41 b8 22 11      	mov %eax, 0x1122
-b=66 -b=41 -b=bf -b=22 -b=11                               # 0:	66 41 bf 22 11      	mov %edi, 0x1122

-b=67 -b=b8 -b=88 -b=77 -b=66 -b=55                         # 0:	67 b8 88 77 66 55   	mov %eax, 0x55667788
-b=67 -b=bf -b=88 -b=77 -b=66 -b=55                         # 0:	67 bf 88 77 66 55   	mov %edi, 0x55667788

# Note: The following read the 64 bit immediate, but don't print them correctly (i.e. a bug)
-b=48 -b=b8 -b=88 -b=77 -b=66 -b=55 -b=44 -b=33 -b=22 -b=11              # 0:	48 b8 88 77 66 55 44 33 22 11	mov %eax, 0x55667788
-b=48 -b=bf -b=88 -b=77 -b=66 -b=55 -b=44 -b=33 -b=22 -b=11              # 0:	48 bf 88 77 66 55 44 33 22 11	mov %edi, 0x55667788

-b=66 -b=48 -b=b8 -b=88 -b=77 -b=66 -b=55 -b=44 -b=33 -b=22 -b=11        # 0:	66 48 b8 88 77 66 55 44 33 22 11	mov %eax, 0x55667788
-b=66 -b=48 -b=bf -b=88 -b=77 -b=66 -b=55 -b=44 -b=33 -b=22 -b=11        # 0:	66 48 bf 88 77 66 55 44 33 22 11	mov %edi, 0x55667788

-b=67 -b=48 -b=b8 -b=88 -b=77 -b=66 -b=55 -b=44 -b=33 -b=22 -b=11        # 0:	67 48 b8 88 77 66 55 44 33 22 11	mov %eax, 0x55667788
-b=67 -b=48 -b=bf -b=88 -b=77 -b=66 -b=55 -b=44 -b=33 -b=22 -b=11        # 0:	67 48 bf 88 77 66 55 44 33 22 11	mov %edi, 0x55667788

-b=66 -b=67 -b=48 -b=ba -b=88 -b=77 -b=66 -b=55 -b=44 -b=33 -b=22 -b=11  # 0:	66 67 48 ba 88 77 66 55 44 33 22 11	mov %edx, 0x55667788
-b=66 -b=67 -b=48 -b=bf -b=88 -b=77 -b=66 -b=55 -b=44 -b=33 -b=22 -b=11  # 0:	66 67 48 bf 88 77 66 55 44 33 22 11	mov %edi, 0x55667788

# Check direct moves on 32-bit constant addresses.
# Note: output of direct moves only prints four bytes of the constant address.
-b=a0 -b=88 -b=77 -b=66 -b=55 -b=44 -b=33 -b=22 -b=11           # 0:	a0 88 77 66 55 44 33 22 11	mov %al, [0x55667788]
# Note: Should use %ax instead of %rax
-b=66 -b=a1 -b=88 -b=77 -b=66 -b=55 -b=44 -b=33 -b=22 -b=11     # 0:	66 a1 88 77 66 55 44 33 22 11	mov %rax, [0x55667788]
# Note: Should use %eax instead of %rax
-b=a1 -b=88 -b=77 -b=66 -b=55 -b=44 -b=33 -b=22 -b=11           # 0:	a1 88 77 66 55 44 33 22 11	mov %rax, [0x55667788]
-b=48 -b=a1 -b=88 -b=77 -b=66 -b=55 -b=44 -b=33 -b=22 -b=11     # 0:	48 a1 88 77 66 55 44 33 22 11	mov %rax, [0x55667788]
-b=a2 -b=88 -b=77 -b=66 -b=55 -b=44 -b=33 -b=22 -b=11           # 0:	a2 88 77 66 55 44 33 22 11	mov [0x55667788], %al
# Note: Should use %ax instead of %rax
-b=66 -b=a3 -b=88 -b=77 -b=66 -b=55 -b=44 -b=33 -b=22 -b=11     # 0:	66 a3 88 77 66 55 44 33 22 11	mov [0x55667788], %rax
# Note: Should use %eax instead of %rax
-b=a3 -b=88 -b=77 -b=66 -b=55 -b=44 -b=33 -b=22 -b=11           # 0:	a3 88 77 66 55 44 33 22 11	mov [0x55667788], %rax
-b=48 -b=a3 -b=88 -b=77 -b=66 -b=55 -b=44 -b=33 -b=22 -b=11     # 0:	48 a3 88 77 66 55 44 33 22 11	mov [0x55667788], %rax
