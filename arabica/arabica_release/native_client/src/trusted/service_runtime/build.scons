# -*- python -*-
# Copyright 2008, Google Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#     * Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above
# copyright notice, this list of conditions and the following disclaimer
# in the documentation and/or other materials provided with the
# distribution.
#     * Neither the name of Google Inc. nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


Import('env')

# Currently, this is only defined for x86, so only compile if x86.
if env['TARGET_ARCHITECTURE'] != 'x86':
  Return()

# TODO(robertm): this is necessary for  unittest_main.c which includes
#                third_party/gtest/files/include/gtest/gtest.h
#                The problem is that gtest.h includes other files
#                expecting the include path to be set
env.Prepend(
    CPPPATH=
      ['${SOURCE_ROOT}/native_client/src/third_party/gtest/files/include'])

if env.Bit('linux') or env.Bit('mac'):
  # because of: gtest-typed-test.h:236:46: error:
  # anonymous variadic macros were introduced in C99
  env.FilterOut(CCFLAGS=['-pedantic'])


# TODO(robertm): move those into EXTR_LIB when feature available
env.Prepend(
    LIBS = [
        'sel',
        'nacl_xdr',
        'nonnacl_srpc',
        'nrd_xfer',
        'nonnacl_util_c',
        'ncvalidate',
        'google_nacl_imc_c',
        'container',
        'platform_qual_lib',
        'platform',
        'gio',
        'expiration',
    ],
)

# Make a copy of debug CRT for now.
# TODO(bradnelson): there should be a better way to generalize this requirement.
crt = []
if env.AllBits('windows', 'debug'):
  for i in ['.', '${STAGING_DIR}']:
    crt += env.Replicate(i, '$VC80_DIR/vc/redist/Debug_NonRedist/'
                         'x86/Microsoft.VC80.DebugCRT')
    crt += env.Replicate(i, '$VC80_DIR/vc/redist/x86/Microsoft.VC80.CRT')


if env.Bit('windows'):
  syscall_impl = 'win/nacl_syscall_impl.c'
else:
  syscall_impl = 'linux/nacl_syscall_impl.c'

# TODO GENERATED CODE
GENERATED='${TARGET_ROOT}/gen/src/trusted/service_runtime'
env.Command(target=GENERATED + '/nacl_syscall_handlers.c',
            source=[syscall_impl, 'nacl_syscall_handlers_gen2.py'],
            action=[Delete(GENERATED),
                    Mkdir(GENERATED),
                    Copy('${TARGET}.tmp', '${SOURCE}'),
                    Chmod('${TARGET}.tmp', 0755),
                    Action('${PYTHON} ${SOURCES[1]}'
                           ' ${SYSCALL_GEN_FLAGS} < ${SOURCE} >>${TARGET}.tmp'),
                    Move('${TARGET}', '${TARGET}.tmp')])

# ----------------------------------------------------------
ldr_inputs = [
    'dyn_array.c',
    'env_cleanser.c',
    'nacl_all_modules.c',
    'nacl_app.c',
    'nacl_app_thread.c',
    'nacl_bottom_half.c',
    'nacl_check.c',
    'nacl_closure.c',
    'nacl_globals.c',
    'nacl_ldt.c',
    'nacl_memory_object.c',
    'nacl_switch_to_app.c',
    'nacl_sync_queue.c',
    'nacl_syscall_common.c',
    GENERATED + '/nacl_syscall_handlers.c',
    'nacl_syscall_hook.c',
    'sel_addrspace.c',
    'sel_ldr.c',
    'sel_ldr_standard.c',
    'sel_load_image.c',
    'sel_mem.c',
    'sel_rt.c',
    'sel_util.c',
    'sel_validate_image.c',
    'web_worker_stub.c',
    'arch/x86_32/nacl_switch.S',
    'arch/x86_32/nacl_syscall.S',
    'arch/x86_32/springboard.S',
    'arch/x86_32/tramp.S',
]


if env.Bit('windows'):
  ldr_inputs += [
      'win/nacl_ldt.c',
      'win/sel_memory.c',
      'win/sel_segments.c',
  ]
elif env.Bit('mac'):
  ldr_inputs += [
      'osx/nacl_ldt.c',
      'linux/sel_memory.c',
      'linux/sel_segments.c',
  ]
else:
  ldr_inputs += [
      'linux/nacl_ldt.c',
      'linux/sel_memory.c',
      'linux/sel_segments.c',
  ]
# ----------------------------------------------------------
# SDL hacks
# NOTE: there are some more sdl hacks in ../SConstruct
# ----------------------------------------------------------
sdl_mode = ARGUMENTS.get('sdl', 'hermetic')
# Require a valid sdl mode.
if sdl_mode not in ['hermetic', 'local', 'none']:
  assert(0)

if sdl_mode == 'none':
  # NOTE: do not export multimedia syscalls unless we are using sdl
  env.Append(SYSCALL_GEN_FLAGS ='-c -f "Video|Audio|Multimedia"')
else:
  # NOTE: explain this
  env.Tool('sdl')
  print '=' * 70
  print 'SDL build (%s) enabled for %s' % (sdl_mode, env['BUILD_TYPE'])
  print env.subst('Using version in ${SDL_DIR}')
  print '=' * 70

  env.Append(SYSCALL_GEN_FLAGS='-c')
  env.Append(CPPDEFINES=['HAVE_SDL'])

  if env.Bit('windows'):
    if env.Bit('debug'):
      env.Append(LINKFLAGS = ['/SUBSYSTEM:CONSOLE'])
    else:
      env.Append(LINKFLAGS = ['/SUBSYSTEM:WINDOWS'])

  if env.Bit('mac'):
    env_sdlmain = env.Clone()
    env_sdlmain.FilterOut(CCFLAGS=['-Werror'])
    ldr_inputs += [
        env_sdlmain.ComponentObject(
            'SDLApplication',
            '$MAIN_DIR/common/SDLApplication.m'),
    ]

env.ComponentLibrary('sel', ldr_inputs,
                     EXTRA_LIBS=['platform',
                                 'nrd_xfer'])

env.ComponentLibrary('gio', ['gio.c',
                             'gio_mem.c',
                             'gprintf.c',
                             'gio_mem_snapshot.c'])

env.ComponentLibrary('container', ['generic_container/container.c'])

env.ComponentLibrary('expiration', ['expiration.c'])

env.ComponentLibrary('nacl_xdr', ['fs/xdr.c', 'fs/obj_proxy.c'])

# NOTE(robertm): these extra libs were orignially only added to the
#                sel_ldr binary
if env.Bit('windows'):
  env.Append(
      LIBS = [
          'ws2_32',
          'kernel32',
          'advapi32',
# TODO(gregoryd): ntdll.lib is required for sem_get_value implementation but
# it is available in Windows DDK only. The DDK is not
# in third_party, but we might need to add it if we want to use it.
#          'ntdll',
      ],
  )

# TODO(bradnelson): clean this up more
sdl_dll = []
if env.Bit('windows'):
  sdl_dll += env.Replicate('$STAGING_DIR', '$SDL_DIR/lib/SDL.dll')
  sdl_dll += env.Replicate('.', '$SDL_DIR/lib/SDL.dll')
  env.AddPluginPrerequisite(['$SDL_DIR/lib/SDL.dll'])
elif env.Bit('mac'):
  # TODO: why do we replicate this THREE times?
  sdl_dll += env.Replicate('$TARGET_ROOT/Frameworks', '$SDL_DIR/SDL.framework')
  sdl_dll += env.Replicate('$OBJ_ROOT/Frameworks', '$SDL_DIR/SDL.framework')
  sdl_dll += env.Replicate('$OBJ_ROOT/src/trusted/Frameworks',
                           '$SDL_DIR/SDL.framework')
  env.AddPluginPrerequisite(['$SDL_DIR/SDL.framework'])
elif env.Bit('linux'):
  sdl_dll += env.Replicate('$STAGING_DIR', '$SDL_DIR/lib/libSDL-1.2.so.0')
  sdl_dll += env.Replicate('.', '$SDL_DIR/lib/libSDL-1.2.so.0')
  env.AddPluginPrerequisite(['$SDL_DIR/lib/libSDL-1.2.so.0'])

if not env.get('COVERAGE_ENABLED') or not env.Bit('windows'):
  SEL_LDR_NODE = env.ComponentProgram('sel_ldr', 'sel_main.c')
  # we need this to build the plugin, so register it here
  env.AddPluginPrerequisite(SEL_LDR_NODE[0])

  env.ComponentProgram('sel_universal', 'sel_universal.c')
  env.ComponentProgram('nacl_ldt_unittest', 'nacl_ldt_unittest.c')
  env.Requires(SEL_LDR_NODE, crt)
  env.Requires(SEL_LDR_NODE, sdl_dll)

# ----------------------------------------------------------
# Unit Tests
# ----------------------------------------------------------

unittest_inputs = [
    'unittest_main.cc',
    'sel_memory_unittest.cc',
    'nacl_sync_unittest.cc',
    'gio_mem_test.cc',
    'sel_mem_test.cc',
    'sel_ldr_test.cc',
]

UNITTEST_OUTPUT = env.subst('$TARGET_ROOT/test_results/src/trusted/'
                            + 'service_runtime/gtest_output.xml')
env['ENV']['GTEST_OUTPUT'] = 'xml:' + UNITTEST_OUTPUT

unit_tests_exe = env.ComponentProgram('service_runtime_tests', unittest_inputs,
                                       EXTRA_LIBS=['gtest'])
env.Requires(unit_tests_exe, sdl_dll)

# TODO(gregoryd): the "-d" argument does nothing, however Hammer doesn't run
# the test if it is launched without any arguments.
node = env.Command(UNITTEST_OUTPUT,
                   [unit_tests_exe],
                   '$SOURCE -d')
env.AddNodeToTestSuite(node, ['small_tests'], 'run_service_runtime_tests')

# Doesn't work on windows under coverage.
# TODO(bradnelson): fix this to work on windows under coverage.
if not env.Bit('windows') or not env.get('COVERAGE_ENABLED'):
  mmap_test_exe = env.ComponentProgram('mmap_test', ['mmap_test.c'])
  env.Requires(mmap_test_exe, crt)
  env.Requires(mmap_test_exe, sdl_dll)

  # TODO(robertm): This test emits lots of messages to stderr
  node = env.CommandTestAgainstGoldenOutput(
      "mmap_test.out",
      [mmap_test_exe[0], env.File('testdata/hello_world.nexe')])
  env.AddNodeToTestSuite(node, ['medium_tests'])

  # also seems to have issues with windows coverage
  nacl_sync_cond_test_exe = env.ComponentProgram(
      'nacl_sync_cond_test',
      ['nacl_sync_cond_test.c'])
  env.Requires(nacl_sync_cond_test_exe, crt)
  env.Requires(nacl_sync_cond_test_exe, sdl_dll)

  node = env.CommandTestAgainstGoldenOutput(
      'nacl_sync_cond_test.out',
      # NOTE: this is run out of obj/ rather than staging/
      [nacl_sync_cond_test_exe])
  env.AddNodeToTestSuite(node, ['medium_tests'], 'run_nacl_sync_cond_test')


expiration_test_exe = env.ComponentProgram('expiration_test',
                                           ['expiration_test.c'])
node = env.CommandTestAgainstGoldenOutput(
    'expiration_test.out',
    [expiration_test_exe])
env.Requires(expiration_test_exe, crt)
env.Requires(expiration_test_exe, sdl_dll)
env.AddNodeToTestSuite(node, ['medium_tests'])


env_cleanser_test_exe = env.ComponentProgram('env_cleanser_test',
                                             ['env_cleanser_test.c'])
node = env.CommandTestAgainstGoldenOutput(
    'env_cleanser_test.out',
    [env_cleanser_test_exe])
env.Requires(env_cleanser_test_exe, crt)
env.Requires(env_cleanser_test_exe, sdl_dll)
env.AddNodeToTestSuite(node, ['small_tests'])


# ----------------------------------------------------------
# Integration Tests
# ----------------------------------------------------------
node = env.CommandSelLdrTestNacl(
    "mandel_canned.out",
    command=[env.File('testdata/mandel.nexe')],
    stdin='$SCONSTRUCT_DIR/tests/mandel/test.stdin',
    stdout_golden='$SCONSTRUCT_DIR/tests/mandel/test.stdout')
env.AddNodeToTestSuite(node, ['medium_tests'])


node = env.CommandSelLdrTestNacl(
    "fib_scalar_canned.out",
    command=[env.File('testdata/fib_scalar.nexe')],
    stdin='$SCONSTRUCT_DIR/tests/fib/fib_scalar_test.stdin',
    stdout_golden='$SCONSTRUCT_DIR/tests/fib/fib_scalar_test.stdout')
env.AddNodeToTestSuite(node, ['medium_tests'])


node = env.CommandSelLdrTestNacl(
    "fib_array_canned.out",
    command=[env.File('testdata/fib_array.nexe')],
    stdin='$SCONSTRUCT_DIR/tests/fib/fib_array_test.stdin',
    stdout_golden='$SCONSTRUCT_DIR/tests/fib/fib_array_test.stdout')
env.AddNodeToTestSuite(node, ['medium_tests'])


# Doesn't work on windows under coverage.
# TODO(bradnelson): fix this to work on windows under coverage.
if not env.Bit('windows') or not env.get('COVERAGE_ENABLED'):
  obj_proxy_test_inputs = [ 'fs/obj_proxy_test.c', ]
  obj_proxy_test = env.ComponentProgram('obj_proxy_test',
                                        obj_proxy_test_inputs)


  node = env.CommandTestAgainstGoldenOutput(
      'obj_proxy_test.out',
      # NOTE: this is run out of obj/ rather than staging/
      [obj_proxy_test, '-n', '2048'],
      size='huge')
  # TODO(bsy): change this test to use less time -- most of it (on windows)
  # is in the RNG, so with this will inherently speed up when the RNG is
  # updated.


  env.Requires(node, sdl_dll)
  env.AddNodeToTestSuite(node, ['small_tests'], 'obj_proxy_tests')


node = env.CommandSelLdrTestNacl(
    'nacl_log.out',
    command=[env.File('testdata/hello_world.nexe')],
    log_golden=env.File('testdata/hello_world.log'),
    log_filter='"^(Hello, World!)$|^\[[0-9,:.]*\] (e_ident\+1 = ELF)$"')
env.AddNodeToTestSuite(node, ['medium_tests'])

# ----------------------------------------------------------
# Death Tests
# ----------------------------------------------------------
ERROR_WHILE_LOADING = '"^(Error while loading).*' +  '(:[^:]*)"'

node = env.CommandSelLdrTestNacl(
    'integer_overflow_while_madvising.out',
    command=[env.File('testdata/integer_overflow_while_madvising.nexe')],
    stderr_golden=env.File('testdata/integer_overflow_while_madvising.stderr'),
    stderr_filter=ERROR_WHILE_LOADING,
    exit_status='1')
env.AddNodeToTestSuite(node, ['medium_tests'])


node = env.CommandSelLdrTestNacl(
    'negative_memory_hole.out',
    command=[env.File('testdata/negative_hole.nexe')],
    stderr_golden=env.File('testdata/negative_hole.stderr'),
    stderr_filter=ERROR_WHILE_LOADING,
    exit_status='1')
env.AddNodeToTestSuite(node, ['medium_tests'])


node = env.CommandSelLdrTestNacl(
    'old_abi.out',
    command=[env.File('testdata/old_abi.nexe')],
    stderr_golden=env.File('testdata/old_abi.stderr'),
    stderr_filter=ERROR_WHILE_LOADING,
    exit_status='1')
env.AddNodeToTestSuite(node, ['medium_tests'])


node = env.CommandSelLdrTestNacl(
    'text_too_big.out',
    command=[env.File('testdata/text_too_big.nexe')],
    stderr_golden=env.File('testdata/text_too_big.stderr'),
    stderr_filter=ERROR_WHILE_LOADING,
    exit_status='1')
env.AddNodeToTestSuite(node, ['medium_tests'])


null_ptr_exit = None
if env.Bit('linux'):
  null_ptr_exit = '-11'  # SIGSEGV
elif env.Bit('mac'):
  null_ptr_exit = '-10'  # SIGBUS
elif env.Bit('windows'):
  null_ptr_exit = '-1073741819'  # 0x3ffffffB

sel_ldr_thread_death_test_exe = env.ComponentProgram(
    'sel_ldr_thread_death_test',
    ['sel_ldr_thread_death_test.c'])

node = env.CommandTestAgainstGoldenOutput(
    'sel_ldr_thread_death_test.out',
    [sel_ldr_thread_death_test_exe],
    exit_status=null_ptr_exit)

# TODO(tuduce): Make it work on windows.
if not env.Bit('windows'):
  env.AddNodeToTestSuite(node, ['medium_tests'], 'run_ichi')

node = env.CommandSelLdrTestNacl(
    'nullptr.out',
    # built in tests/nullptr/
    command=[env.File('testdata/nullptr.nexe')],
    exit_status=null_ptr_exit)
env.AddNodeToTestSuite(node, ['medium_tests'])
