# todo:
# - write PhonyTarget that takes source dependencies and return its node

import os

###############################
# configuration
NACL_LINKER = "/home/<username>/robustatrunk/MSNaCl/nacl-build/googleclient/native_client/install-stubout/lib/ld-linux.so.2"

#JAVA_BIN_BUILD_DIR="/home/<username>/robustatrunk/openjdk/build/linux-i586/j2re-image/bin/"
JAVA_BIN_BUILD_DIR="/home/<username>/robustatrunk/openjdk-full/build/linux-i586/j2re-image/bin/"

# Dynlink path
DYNLINK_PATH = '/home/<username>/robustatrunk/librobusta/dynlink2'

#native_client directory
NATIVE_CLIENT = '/home/<username>/robustatrunk/native_client'

#Japex Library Directory
JAPEX_LIB_DIR = "/home/<username>/robustatrunk/benchmarks/japex1.0/lib/"

###############################
# Common routines

def PhonyTarget(env, target, sources, action):
    if not env: env = DefaultEnvironment()
    phony = env.Alias(target, sources, action);
    AlwaysBuild(phony)

def gen_list( target_env, obj_name_list, dir, type, suffix):
	obj_list = [];
	for obj_name in obj_name_list:
		obj_list = [obj_list, target_env.SharedObject(dir + obj_name + type, dir + obj_name + suffix)];
	return obj_list;


###############################
# the default target:
#   building a new sel_ldr that can load dynamically linked object files

NACL_PATH='../..'

# Header file paths
# N.B., removed /native_client/src/third_party/sdl/linux/v_1_2_13/include
NACL_DEV_INCPATH = [NACL_PATH+'/native_client/src/third_party/gtest/files/include',
                    NACL_PATH]

NACL_LIB_PATH=NACL_PATH+'/native_client/scons-out/opt-linux-x86-32/lib'

# Library paths
NAC_DEV_LIBPATH=['usr/lib32', 'usr/lib', NACL_LIB_PATH,
                 NACL_PATH+'/native_client/src/third_party/sdl/linux/v1_2_13/lib']

# Libraries used by sel_ldr (some may not be useful for Robusta)
NACL_DEV_LIBS=['sel', 'nacl_xdr', 'nonnacl_srpc', 'nrd_xfer', 'nonnacl_util_c',
               'ncvalidate', 'google_nacl_imc_c', 'container', 'platform_qual_lib',
               'platform', 'gio', 'expiration', 'rt', 'pthread', 'ssl', 'crypto',
               'SDL', 'SDLmain']


# nacl development environment
os.environ['NACL_LINKER']=NACL_LINKER
env=Environment(CPPPATH=NACL_DEV_INCPATH,
                LIBPATH=NAC_DEV_LIBPATH,
                ENV = os.environ)


# Mark Seaborn's version of nacl can build PIs
NACL_SDK_PATH="/home/<username>/robustatrunk/MSNaCl/nacl-build/googleclient/native_client"
NACL_SDK_BIN_PATH = NACL_SDK_PATH + "/tools_bin/linux/sdk/nacl-sdk/bin"
GLIBC_SOURCE = NACL_SDK_PATH + "/glibc"
GLIBC = NACL_SDK_PATH + "/install"

DYN_NACL_CCFLAGS = ["-isystem", GLIBC + "/include",
                    "-isystem", GLIBC_SOURCE +"/kernel-headers", 
		    "-I" + NATIVE_CLIENT + "/src/trusted/service_runtime"] 

DYN_NACL_LINKFLAGS = ["-B" + GLIBC+"/lib",
                      "-Wl,-rpath,"+NACL_SDK_PATH+"/install-stubout/lib",
		      "-Wl,-rpath,"+DYNLINK_PATH+"/tests"]

DYN_NACL_JAVA_CCFLAGS=[DYN_NACL_CCFLAGS, 
			"-I/usr/local/jdk1.6.0_16/include/", 
			"-I/usr/local/jdk1.6.0_16/include/linux/", 
			"-I."]

# nacl SDK environment
naclSDKEnv=Environment(CC=NACL_SDK_BIN_PATH + "/nacl-gcc", CXX=NACL_SDK_BIN_PATH + "/nacl-g++",
                       CPPPATH=['/usr/include'],
                       LIBPATH=[GLIBC+"/lib", GLIBC_SOURCE+"/ld", 
		       DYNLINK_PATH+"/tests"])

#Java Benchmark Build Environment
JAPEX_LIBS = [JAPEX_LIB_DIR + "activation.jar",
	JAPEX_LIB_DIR + "ant.jar",
	JAPEX_LIB_DIR + "japex.jar",
	JAPEX_LIB_DIR + "jaxb-api.jar",
	JAPEX_LIB_DIR + "jaxb-impl.jar",
	JAPEX_LIB_DIR + "jaxb-xjc.jar",
	JAPEX_LIB_DIR + "jcommon-1.0.0-rc1.jar",
	JAPEX_LIB_DIR + "jfreechart-1.0.0-rc1.jar",
	JAPEX_LIB_DIR + "jsr173_api.jar",
	JAPEX_LIB_DIR + "mail.jar",
	JAPEX_LIB_DIR + "sjsxp.jar"]

JAPEX_LIBS_COLON = ':'.join(map(str, JAPEX_LIBS)) 

javaBuildEnv = Environment(JAVACLASSPATH = JAPEX_LIBS)

NORMAL_NATIVE_LIBS = "./lib/normal/"
SANDBOXED_NATIVE_LIBS = "./lib/sandboxed/"
STUB_NATIVE_LIBS = "./lib/stub/"
JAVA_BUILD_LOC = "build/classes"
JDK_INCLUDE = "/usr/local/jdk1.6.0_16/include/"
JDK_INCLUDE_LINUX = "/usr/local/jdk1.6.0_16/include/linux/"
LIBROBUSTA_INCLUDE = "/home/<username>/robustatrunk/librobusta/.libs/librobusta.so"
# normal = Environment(CCFLAGS = ['-O3', '-std=gnu99', JDK_INCLUDE, JDK_INCLUDE_LINUX])
normal = Environment(CCFLAGS = [JDK_INCLUDE, JDK_INCLUDE_LINUX])
normalcpp = Environment(CXXFLAGS = ['-O3']);

#Stub library flags
STUB_CCFLAGS = ["-I/home/<username>/robustatrunk/include/"]

##Instrumentation Support
INST_DIR="src/common/";
vanilla_watcher = normal.SharedObject(INST_DIR + "vanilla_watcher.c");

###############################
# The Blank test library
BLANK_SRC_ROOT = "src/simple/blank/"

sBlank = naclSDKEnv.SharedObject(BLANK_SRC_ROOT + 'Blank-sandboxed', BLANK_SRC_ROOT + 'Blank.c', CCFLAGS=DYN_NACL_JAVA_CCFLAGS)
libBlankSand = naclSDKEnv.SharedLibrary(SANDBOXED_NATIVE_LIBS + "libBlank.so", sBlank, LINKFLAGS=DYN_NACL_LINKFLAGS)

nBlank = normal.SharedObject(BLANK_SRC_ROOT + 'Blank-normal', BLANK_SRC_ROOT + 'Blank.c')
libBlank = SharedLibrary(NORMAL_NATIVE_LIBS + "libBlank.so", nBlank)

tBlank = normal.SharedObject(BLANK_SRC_ROOT + 'Blank-stub', BLANK_SRC_ROOT + 'StubBlank.c', CCFLAGS=STUB_CCFLAGS)
libBlankStub = SharedLibrary(STUB_NATIVE_LIBS + "libBlank.so", tBlank, LINKFLAGS=LIBROBUSTA_INCLUDE)

###############################
# The HelloWorld Example library
HELLOWORLD_SRC_ROOT = "src/simple/helloworld/"

sHelloWorld = naclSDKEnv.SharedObject(HELLOWORLD_SRC_ROOT + 'HelloWorld-sandboxed', HELLOWORLD_SRC_ROOT + 'HelloWorld.c', CCFLAGS=DYN_NACL_JAVA_CCFLAGS)
libHelloWorldSand = naclSDKEnv.SharedLibrary(SANDBOXED_NATIVE_LIBS + "libHelloWorld.so", sHelloWorld, LINKFLAGS=DYN_NACL_LINKFLAGS)

n = normal.SharedObject(HELLOWORLD_SRC_ROOT + 'HelloWorld-normal', HELLOWORLD_SRC_ROOT + 'HelloWorld.c')
libHelloWorld = SharedLibrary(NORMAL_NATIVE_LIBS + "libHelloWorld.so", n)

tHelloWorld = normal.SharedObject(HELLOWORLD_SRC_ROOT + 'HelloWorld-stub', HELLOWORLD_SRC_ROOT + 'StubHelloWorld.c', CCFLAGS=STUB_CCFLAGS)
libHelloWorldStub = SharedLibrary(STUB_NATIVE_LIBS + "libHelloWorld.so", tHelloWorld, LINKFLAGS=LIBROBUSTA_INCLUDE)

HelloWorldJava = javaBuildEnv.Java(JAVA_BUILD_LOC, HELLOWORLD_SRC_ROOT)

###############################
# The Multiple Sandbox HelloWorld Example library
MULTHELLOWORLD_SRC_ROOT = "src/simple/multhelloworld/"

sMultHelloWorld1 = naclSDKEnv.SharedObject(MULTHELLOWORLD_SRC_ROOT + 'MultHelloWorld1-sandboxed', MULTHELLOWORLD_SRC_ROOT + 'MultHelloWorld1.c', CCFLAGS=DYN_NACL_JAVA_CCFLAGS)
libMultHelloWorld1Sand = naclSDKEnv.SharedLibrary(SANDBOXED_NATIVE_LIBS + "libMultHelloWorld1.so", sMultHelloWorld1, LINKFLAGS=DYN_NACL_LINKFLAGS)

sMultHelloWorld2 = naclSDKEnv.SharedObject(MULTHELLOWORLD_SRC_ROOT + 'MultHelloWorld2-sandboxed', MULTHELLOWORLD_SRC_ROOT + 'MultHelloWorld2.c', CCFLAGS=DYN_NACL_JAVA_CCFLAGS)
libMultHelloWorld2Sand = naclSDKEnv.SharedLibrary(SANDBOXED_NATIVE_LIBS + "libMultHelloWorld2.so", sMultHelloWorld2, LINKFLAGS=DYN_NACL_LINKFLAGS)

n1 = normal.SharedObject(HELLOWORLD_SRC_ROOT + 'MultHelloWorld1-normal', MULTHELLOWORLD_SRC_ROOT + 'MultHelloWorld1.c')
libMultHelloWorld1 = SharedLibrary(NORMAL_NATIVE_LIBS + "libMultHelloWorld1.so", n1)

n2 = normal.SharedObject(HELLOWORLD_SRC_ROOT + 'MultHelloWorld2-normal', MULTHELLOWORLD_SRC_ROOT + 'MultHelloWorld2.c')
libMultHelloWorld2 = SharedLibrary(NORMAL_NATIVE_LIBS + "libMultHelloWorld2.so", n2)

tMultHelloWorld1 = normal.SharedObject(MULTHELLOWORLD_SRC_ROOT + 'MultHelloWorld1-stub', MULTHELLOWORLD_SRC_ROOT + 'StubMultHelloWorld1.c', CCFLAGS=STUB_CCFLAGS)
libMultHelloWorld1Stub = SharedLibrary(STUB_NATIVE_LIBS + "libMultHelloWorld1.so", tMultHelloWorld1, LINKFLAGS=LIBROBUSTA_INCLUDE)

tMultHelloWorld2 = normal.SharedObject(MULTHELLOWORLD_SRC_ROOT + 'MultHelloWorld2-stub', MULTHELLOWORLD_SRC_ROOT + 'StubMultHelloWorld2.c', CCFLAGS=STUB_CCFLAGS)
libMultHelloWorld2Stub = SharedLibrary(STUB_NATIVE_LIBS + "libMultHelloWorld2.so", tMultHelloWorld2, LINKFLAGS=LIBROBUSTA_INCLUDE)

MultHelloWorldJava = javaBuildEnv.Java(JAVA_BUILD_LOC, MULTHELLOWORLD_SRC_ROOT)

###############################
# The Parameter Passing test library
PARAMPASS_SRC_ROOT = "src/simple/parampass/"

sParamPass = naclSDKEnv.SharedObject(PARAMPASS_SRC_ROOT + 'ParamPass-sandboxed', PARAMPASS_SRC_ROOT + 'ParamPass.c', CCFLAGS=DYN_NACL_JAVA_CCFLAGS)
libParamPassSand = naclSDKEnv.SharedLibrary(SANDBOXED_NATIVE_LIBS + "libParamPass.so", sParamPass, LINKFLAGS=DYN_NACL_LINKFLAGS)

nParamPass = normal.SharedObject(PARAMPASS_SRC_ROOT + 'ParamPass-normal', PARAMPASS_SRC_ROOT + 'ParamPass.c')
libParamPass = SharedLibrary(NORMAL_NATIVE_LIBS + "libParamPass.so", nParamPass)

tParamPass = normal.SharedObject(PARAMPASS_SRC_ROOT + 'ParamPass-stub', PARAMPASS_SRC_ROOT + 'StubParamPass.c', CCFLAGS=STUB_CCFLAGS)
libParamPassStub = SharedLibrary(STUB_NATIVE_LIBS + "libParamPass.so", tParamPass, LINKFLAGS=LIBROBUSTA_INCLUDE)

###############################
# The Basic JNI Wrapper test library
JNIWRAP_SRC_ROOT = "src/jni/jniwrap/"

sJNIWrap = naclSDKEnv.SharedObject(JNIWRAP_SRC_ROOT + 'JNIWrap-sandboxed', JNIWRAP_SRC_ROOT + 'JNIWrap.c', CCFLAGS=DYN_NACL_JAVA_CCFLAGS)
libJNIWrapSand = naclSDKEnv.SharedLibrary(SANDBOXED_NATIVE_LIBS + "libJNIWrap.so", sJNIWrap, LINKFLAGS=DYN_NACL_LINKFLAGS)

nJNIWrap = normal.SharedObject(JNIWRAP_SRC_ROOT + 'JNIWrap-normal', JNIWRAP_SRC_ROOT + 'JNIWrap.c')
libJNIWrap = SharedLibrary(NORMAL_NATIVE_LIBS + "libJNIWrap.so", nJNIWrap)

tJNIWrap = normal.SharedObject(JNIWRAP_SRC_ROOT + 'JNIWrap-stub', JNIWRAP_SRC_ROOT + 'StubJNIWrap.c', CCFLAGS=STUB_CCFLAGS)
libJNIWrapStub = SharedLibrary(STUB_NATIVE_LIBS + "libJNIWrap.so", tJNIWrap, LINKFLAGS=LIBROBUSTA_INCLUDE)

###############################
# The Callbacks test library
CALLBACKS_SRC_ROOT = "src/jni/callbacks/"

sCallbacks = naclSDKEnv.SharedObject(CALLBACKS_SRC_ROOT + 'Callbacks-sandboxed', CALLBACKS_SRC_ROOT + 'Callbacks.c', CCFLAGS=DYN_NACL_JAVA_CCFLAGS)
libCallbacksSand = naclSDKEnv.SharedLibrary(SANDBOXED_NATIVE_LIBS + "libCallbacks.so", sCallbacks, LINKFLAGS=DYN_NACL_LINKFLAGS)

nCallbacks = normal.SharedObject(CALLBACKS_SRC_ROOT + 'Callbacks-normal', CALLBACKS_SRC_ROOT + 'Callbacks.c')
libCallbacks = SharedLibrary(NORMAL_NATIVE_LIBS + "libCallbacks.so", nCallbacks)

tCallbacks = normal.SharedObject(CALLBACKS_SRC_ROOT + 'Callbacks-stub', CALLBACKS_SRC_ROOT + 'StubCallbacks.c', CCFLAGS=STUB_CCFLAGS)
libCallbacksStub = SharedLibrary(STUB_NATIVE_LIBS + "libCallbacks.so", tCallbacks, LINKFLAGS=LIBROBUSTA_INCLUDE)

###############################
# The FieldAccess test library
FIELDACCESS_SRC_ROOT = "src/jni/fieldaccess/"

sFieldAccess = naclSDKEnv.SharedObject(FIELDACCESS_SRC_ROOT + 'FieldAccess-sandboxed', FIELDACCESS_SRC_ROOT + 'FieldAccess.c', CCFLAGS=DYN_NACL_JAVA_CCFLAGS)
libFieldAccessSand = naclSDKEnv.SharedLibrary(SANDBOXED_NATIVE_LIBS + "libFieldAccess.so", sFieldAccess, LINKFLAGS=DYN_NACL_LINKFLAGS)

nFieldAccess = normal.SharedObject(FIELDACCESS_SRC_ROOT + 'FieldAccess-normal', FIELDACCESS_SRC_ROOT + 'FieldAccess.c')
libFieldAccess = SharedLibrary(NORMAL_NATIVE_LIBS + "libFieldAccess.so", nFieldAccess)

tFieldAccess = normal.SharedObject(FIELDACCESS_SRC_ROOT + 'FieldAccess-stub', FIELDACCESS_SRC_ROOT + 'StubFieldAccess.c', CCFLAGS=STUB_CCFLAGS)
libFieldAccessStub = SharedLibrary(STUB_NATIVE_LIBS + "libFieldAccess.so", tFieldAccess, LINKFLAGS=LIBROBUSTA_INCLUDE)

###############################
# The StaticFieldAccess test library
STATICFIELDACCESS_SRC_ROOT = "src/jni/fieldaccess/"

sStaticFieldAccess = naclSDKEnv.SharedObject(STATICFIELDACCESS_SRC_ROOT + 'StaticFieldAccess-sandboxed', STATICFIELDACCESS_SRC_ROOT + 'StaticFieldAccess.c', CCFLAGS=DYN_NACL_JAVA_CCFLAGS)
libStaticFieldAccessSand = naclSDKEnv.SharedLibrary(SANDBOXED_NATIVE_LIBS + "libStaticFieldAccess.so", sStaticFieldAccess, LINKFLAGS=DYN_NACL_LINKFLAGS)

nStaticFieldAccess = normal.SharedObject(STATICFIELDACCESS_SRC_ROOT + 'StaticFieldAccess-normal', STATICFIELDACCESS_SRC_ROOT + 'StaticFieldAccess.c')
libStaticFieldAccess = SharedLibrary(NORMAL_NATIVE_LIBS + "libStaticFieldAccess.so", nStaticFieldAccess)

tStaticFieldAccess = normal.SharedObject(STATICFIELDACCESS_SRC_ROOT + 'StaticFieldAccess-stub', STATICFIELDACCESS_SRC_ROOT + 'StubStaticFieldAccess.c', CCFLAGS=STUB_CCFLAGS)
libStaticFieldAccessStub = SharedLibrary(STUB_NATIVE_LIBS + "libStaticFieldAccess.so", tStaticFieldAccess, LINKFLAGS=LIBROBUSTA_INCLUDE)

###############################
# The Array test library
ARRAY_SRC_ROOT = "src/jni/array/"

sArray = naclSDKEnv.SharedObject(ARRAY_SRC_ROOT + 'Array-sandboxed', ARRAY_SRC_ROOT + 'Array.c', CCFLAGS=DYN_NACL_JAVA_CCFLAGS)
libArraySand = naclSDKEnv.SharedLibrary(SANDBOXED_NATIVE_LIBS + "libArray.so", sArray, LINKFLAGS=DYN_NACL_LINKFLAGS)

nArray = normal.SharedObject(ARRAY_SRC_ROOT + 'Array-normal', ARRAY_SRC_ROOT + 'Array.c')
libArray = SharedLibrary(NORMAL_NATIVE_LIBS + "libArray.so", nArray)

tArray = normal.SharedObject(ARRAY_SRC_ROOT + 'Array-stub', ARRAY_SRC_ROOT + 'StubArray.c', CCFLAGS=STUB_CCFLAGS)
libArrayStub = SharedLibrary(STUB_NATIVE_LIBS + "libArray.so", tArray, LINKFLAGS=LIBROBUSTA_INCLUDE)

###############################
# The IntArray Set Region test library
#INTARRAYSR_SRC_ROOT = "src/jni/intarray/"

#sIntArraySR = naclSDKEnv.SharedObject(INTARRAYSR_SRC_ROOT + 'IntArraySR-sandboxed', INTARRAYSR_SRC_ROOT + 'IntArraySR.c', CCFLAGS=DYN_NACL_JAVA_CCFLAGS)
#libIntArraySRSand = naclSDKEnv.SharedLibrary(SANDBOXED_NATIVE_LIBS + "libIntArraySR.so", sIntArraySR, LINKFLAGS=DYN_NACL_LINKFLAGS)

#nIntArraySR = normal.SharedObject(INTARRAYSR_SRC_ROOT + 'IntArraySR-normal', INTARRAYSR_SRC_ROOT + 'IntArraySR.c')
#libIntArraySR = SharedLibrary(NORMAL_NATIVE_LIBS + "libIntArraySR.so", nIntArraySR)

###############################
# The ObjectArray test library
OBJECTARRAY_SRC_ROOT = "src/jni/objectarray/"

sObjectArray = naclSDKEnv.SharedObject(OBJECTARRAY_SRC_ROOT + 'ObjectArray-sandboxed', OBJECTARRAY_SRC_ROOT + 'ObjectArrayTest.c', CCFLAGS=DYN_NACL_JAVA_CCFLAGS)
libObjectArraySand = naclSDKEnv.SharedLibrary(SANDBOXED_NATIVE_LIBS + "libObjectArray.so", sObjectArray, LINKFLAGS=DYN_NACL_LINKFLAGS)

nObjectArray = normal.SharedObject(OBJECTARRAY_SRC_ROOT + 'ObjectArray-normal', OBJECTARRAY_SRC_ROOT + 'ObjectArrayTest.c')
libObjectArray = SharedLibrary(NORMAL_NATIVE_LIBS + "libObjectArray.so", nObjectArray)

tObjectArray = normal.SharedObject(OBJECTARRAY_SRC_ROOT + 'ObjectArray-stub', OBJECTARRAY_SRC_ROOT + 'StubObjectArrayTest.c', CCFLAGS=STUB_CCFLAGS)
libObjectArrayStub = SharedLibrary(STUB_NATIVE_LIBS + "libObjectArray.so", tObjectArray, LINKFLAGS=LIBROBUSTA_INCLUDE)

###############################
# The Exceptions test library
EXCEPTIONS_SRC_ROOT = "src/jni/exceptions/"

sCatchThrow = naclSDKEnv.SharedObject(EXCEPTIONS_SRC_ROOT + 'CatchThrow-sandboxed', EXCEPTIONS_SRC_ROOT + 'CatchThrow.c', CCFLAGS=DYN_NACL_JAVA_CCFLAGS)
libCatchThrowSand = naclSDKEnv.SharedLibrary(SANDBOXED_NATIVE_LIBS + "libCatchThrow.so", sCatchThrow, LINKFLAGS=DYN_NACL_LINKFLAGS)

nCatchThrow = normal.SharedObject(EXCEPTIONS_SRC_ROOT + 'CatchThrow-normal', EXCEPTIONS_SRC_ROOT + 'CatchThrow.c')
libCatchThrow = SharedLibrary(NORMAL_NATIVE_LIBS + "libCatchThrow.so", nCatchThrow)

tCatchThrow = normal.SharedObject(EXCEPTIONS_SRC_ROOT + 'CatchThrow-stub', EXCEPTIONS_SRC_ROOT + 'StubCatchThrow.c', CCFLAGS=STUB_CCFLAGS)
libCatchThrowStub = SharedLibrary(STUB_NATIVE_LIBS + "libCatchThrow.so", tCatchThrow, LINKFLAGS=LIBROBUSTA_INCLUDE)

###############################
# The Threading test library
THREADING_SRC_ROOT = "src/jni/threading/"

sMonitorCounter = naclSDKEnv.SharedObject(THREADING_SRC_ROOT + 'MonitorCounter-sandboxed', THREADING_SRC_ROOT + 'MonitorCounter.c', CCFLAGS=DYN_NACL_JAVA_CCFLAGS)
libMonitorCounterSand = naclSDKEnv.SharedLibrary(SANDBOXED_NATIVE_LIBS + "libMonitorCounter.so", sMonitorCounter, LINKFLAGS=DYN_NACL_LINKFLAGS)

nMonitorCounter = normal.SharedObject(THREADING_SRC_ROOT + 'MonitorCounter-normal', THREADING_SRC_ROOT + 'MonitorCounter.c')
libMonitorCounter = SharedLibrary(NORMAL_NATIVE_LIBS + "libMonitorCounter.so", nMonitorCounter)

tMonitorCounter = normal.SharedObject(THREADING_SRC_ROOT + 'MonitorCounter-stub', THREADING_SRC_ROOT + 'StubMonitorCounter.c', CCFLAGS=STUB_CCFLAGS)
libMonitorCounterStub = SharedLibrary(STUB_NATIVE_LIBS + "libMonitorCounter.so", tMonitorCounter, LINKFLAGS=LIBROBUSTA_INCLUDE)

###############################
# The JNI_OnLoad test library
ONLOAD_SRC_ROOT = "src/jni/onload/"

sJNIOnload = naclSDKEnv.SharedObject(ONLOAD_SRC_ROOT + 'JNIOnload-sandboxed', ONLOAD_SRC_ROOT + 'JNIOnload.c', CCFLAGS=DYN_NACL_JAVA_CCFLAGS)
libJNIOnloadSand = naclSDKEnv.SharedLibrary(SANDBOXED_NATIVE_LIBS + "libJNIOnload.so", sJNIOnload, LINKFLAGS=DYN_NACL_LINKFLAGS)

nJNIOnload = normal.SharedObject(ONLOAD_SRC_ROOT + 'JNIOnload-normal', ONLOAD_SRC_ROOT + 'JNIOnload.c')
libJNIOnload = SharedLibrary(NORMAL_NATIVE_LIBS + "libJNIOnload.so", nJNIOnload)

tJNIOnload = normal.SharedObject(ONLOAD_SRC_ROOT + 'JNIOnload-stub', ONLOAD_SRC_ROOT + 'StubJNIOnload.c', CCFLAGS=STUB_CCFLAGS)
libJNIOnloadStub = SharedLibrary(STUB_NATIVE_LIBS + "libJNIOnload.so", tJNIOnload, LINKFLAGS=LIBROBUSTA_INCLUDE)

###############################
# The FileAccess test library
FILEACCESS_SRC_ROOT = "src/file/"

sFileAccess = naclSDKEnv.SharedObject(FILEACCESS_SRC_ROOT + 'FileAccess-sandboxed', FILEACCESS_SRC_ROOT + 'FileAccess.c', CCFLAGS=DYN_NACL_JAVA_CCFLAGS)
libFileAccessSand = naclSDKEnv.SharedLibrary(SANDBOXED_NATIVE_LIBS + "libFileAccess.so", sFileAccess, LINKFLAGS=DYN_NACL_LINKFLAGS)

nFileAccess = normal.SharedObject(FILEACCESS_SRC_ROOT + 'FileAccess-normal', FILEACCESS_SRC_ROOT + 'FileAccess.c')
libFileAccess = SharedLibrary(NORMAL_NATIVE_LIBS + "libFileAccess.so", nFileAccess)

tFileAccess = normal.SharedObject(FILEACCESS_SRC_ROOT + 'FileAccess-stub', FILEACCESS_SRC_ROOT + 'StubFileAccess.c', CCFLAGS=STUB_CCFLAGS)
libFileAccessStub = SharedLibrary(STUB_NATIVE_LIBS + "libFileAccess.so", tFileAccess, LINKFLAGS=LIBROBUSTA_INCLUDE)

###############################
# The Zlib test library
ZLIB_SRC_ROOT = "src/zlib2/"
NATIVE_DIR = ZLIB_SRC_ROOT + "native/"
ZLIB_DIR = NATIVE_DIR + "zlib-1.2.3/"

#instrumentation
zlib_env = normal.Clone();
zlib_env.Append(CCFLAGS = ['-DHAVE_UNISTD_H', "-Isrc/common/"]);

nacl_zlib_env = naclSDKEnv.Clone(CCFLAGS = ['-DHAVE_UNISTD_H', '-I' + JDK_INCLUDE, '-I' + JDK_INCLUDE_LINUX] );

stub_zlib_env = normal.Clone();
stub_zlib_env.Append(CCFLAGS = ['-DHAVE_UNISTD_H', "-Isrc/common/", STUB_CCFLAGS]);

zlib_obj_list = Split("""compress  deflate  gzio  infback  inffast  inflate  inftrees  trees  uncompr  zadler32  zcrc32  zutil""");

zlib_jni_obj_list = ["CRC32", "Deflater"];

zlib_stub_jni_obj_list = ["StubCRC32", "StubDeflater"];

#instrumentation
libtestzip = zlib_env.SharedLibrary(NORMAL_NATIVE_LIBS + "libtestzip.so", [gen_list(zlib_env, zlib_obj_list, ZLIB_DIR, "-normal", ".c"), gen_list(zlib_env, zlib_jni_obj_list, NATIVE_DIR, "-normal", ".c")]);

libtestzipSand = nacl_zlib_env.SharedLibrary(SANDBOXED_NATIVE_LIBS + "libtestzip.so", [gen_list(nacl_zlib_env, zlib_obj_list, ZLIB_DIR, "-sandboxed", ".c"), gen_list(nacl_zlib_env, zlib_jni_obj_list, NATIVE_DIR, "-sandboxed", ".c")], LINKFLAGS=DYN_NACL_LINKFLAGS);

libtestzipStub = stub_zlib_env.SharedLibrary(STUB_NATIVE_LIBS + "libtestzip.so", [gen_list(stub_zlib_env, zlib_obj_list, ZLIB_DIR, "-stub", ".c"), gen_list(stub_zlib_env, zlib_stub_jni_obj_list, NATIVE_DIR, "-stub", ".c")], LINKFLAGS=LIBROBUSTA_INCLUDE);

###############################
# The strictmath test library
MATH_SRC_ROOT = "src/math/"
NATIVE_DIR = MATH_SRC_ROOT + "native/"
MATH_DIR = NATIVE_DIR + "fdlibm/src/"
MATH_INCLUDE_DIR = NATIVE_DIR + "fdlibm/include/"

math_env = normal.Clone()
math_env.Append(CCFLAGS = ['-I' + MATH_INCLUDE_DIR, '-I' + JDK_INCLUDE, '-I' + JDK_INCLUDE_LINUX, '-D_LITTLE_ENDIAN']);
naclSDKEnv_math = naclSDKEnv.Clone(CCFLAGS = ['-I' + MATH_INCLUDE_DIR, '-I' + JDK_INCLUDE, '-I' + JDK_INCLUDE_LINUX, '-D_LITTLE_ENDIAN'])

obj_name_list = ['e_acos', 'e_gamma_r', 'e_pow', 'k_standard', 's_expm1', 's_log1p', 's_sin', 'w_exp', 'w_lgamma_r', 'e_acosh', 'e_hypot', 'e_remainder', 'k_tan', 's_fabs', 's_logb', 's_tan', 'w_fmod', 'w_log10', 'e_asin', 'e_j0', 'e_rem_pio2', 's_asinh', 's_finite', 's_matherr', 's_tanh', 'w_gamma', 'w_log', 'e_atan2', 'e_j1', 'e_scalb', 's_atan', 's_floor', 's_modf', 'w_acos', 'w_gamma_r', 'w_pow', 'e_atanh', 'e_jn', 'e_sinh', 's_cbrt', 's_frexp', 's_nextafter', 'w_acosh', 'w_hypot', 'w_remainder', 'e_cosh', 'e_lgamma', 'e_sqrt', 's_ceil', 's_ilogb', 's_rint', 'w_asin', 'w_j0', 'w_scalb', 'e_exp', 'e_lgamma_r', 'k_cos', 's_copysign', 's_isnan', 's_scalbn', 'w_atan2', 'w_j1', 'w_sinh', 'e_fmod', 'e_log10', 'k_rem_pio2', 's_cos', 's_ldexp', 's_signgam', 'w_atanh', 'w_jn', 'w_sqrt', 'e_gamma', 'e_log', 'k_sin', 's_erf', 's_lib_version', 's_significand', 'w_cosh', 'w_lgamma']

normal_obj_list=[]
sandboxed_obj_list=[]

for obj_name in obj_name_list:
	normal_obj_list = [normal_obj_list, math_env.SharedObject(MATH_SRC_ROOT + obj_name + '-normal', MATH_DIR + obj_name + ".c") ]
	sandboxed_obj_list = [sandboxed_obj_list, naclSDKEnv_math.SharedObject(MATH_SRC_ROOT + obj_name + '-sandboxed', MATH_DIR + obj_name + ".c") ]

other_obj_name_list = ['StrictMath']

for obj_name in other_obj_name_list:
	normal_obj_list = [normal_obj_list, math_env.SharedObject(MATH_SRC_ROOT + obj_name + '-normal', NATIVE_DIR + obj_name + ".c") ]
	sandboxed_obj_list = [sandboxed_obj_list, naclSDKEnv_math.SharedObject(MATH_SRC_ROOT + obj_name + '-sandboxed', NATIVE_DIR + obj_name + ".c") ]


libmath = SharedLibrary(NORMAL_NATIVE_LIBS + "libStrictMath.so", normal_obj_list)
libmathSand = naclSDKEnv_math.SharedLibrary(SANDBOXED_NATIVE_LIBS + "libStrictMath.so", sandboxed_obj_list, LINKFLAGS=DYN_NACL_LINKFLAGS)

tStrictMath = normal.SharedObject(MATH_SRC_ROOT + 'StrictMath-stub', NATIVE_DIR + 'StubStrictMath.c', CCFLAGS=STUB_CCFLAGS)
libmathStub = SharedLibrary(STUB_NATIVE_LIBS + "libStrictMath.so", tStrictMath, LINKFLAGS=LIBROBUSTA_INCLUDE)

###############################
# Another jpeg test library...

JPEG_SRC_ROOT = "src/jpeg/"
NATIVE_DIR = JPEG_SRC_ROOT + "native/"

jpeg_env = normal.Clone()
jpeg_env.Append(CPPFLAGS=["-I" + NATIVE_DIR + "jpeg-6b/", "-I" + NATIVE_DIR]);
nacl_jpeg_env = naclSDKEnv.Clone(CPPFLAGS=["-I" + NATIVE_DIR + "jpeg-6b/", "-I" + NATIVE_DIR, '-I' + JDK_INCLUDE, '-I' + JDK_INCLUDE_LINUX]);

jpeg_obj_list = Split("""jcapimin jcapistd jctrans jcparam jdatadst jcinit jcmaster jcmarker jcmainct jcprepct jccoefct jccolor jcsample jchuff jcphuff jcdctmgr jfdctfst jfdctflt jfdctint jdapimin jdapistd jdtrans jdatasrc jdmaster jdinput jdmarker jdhuff jdphuff jdmainct jdcoefct jdpostct jddctmgr jidctfst jidctflt jidctint jidctred jdsample jdcolor jquant1 jquant2 jdmerge jcomapi jutils jerror jmemmgr jmemnobs
rdbmp""");

jpeg_bind_list = Split("""JpegCompressTest""");

libjpeg = jpeg_env.SharedLibrary(NORMAL_NATIVE_LIBS + "libjpegt.so", [gen_list(jpeg_env, jpeg_obj_list, NATIVE_DIR + "jpeg-6b/", "-normal", ".c"), gen_list(jpeg_env, jpeg_bind_list, NATIVE_DIR, "-normal", ".c")]);

libjpegSand = nacl_jpeg_env.SharedLibrary(SANDBOXED_NATIVE_LIBS + "libjpegt.so", [gen_list(nacl_jpeg_env, jpeg_obj_list, NATIVE_DIR + "jpeg-6b/", "-sandboxed", ".c"), gen_list(nacl_jpeg_env, jpeg_bind_list, NATIVE_DIR, "-sandboxed", ".c")], LINKFLAGS=DYN_NACL_LINKFLAGS);

tJpeg = normal.SharedObject(NATIVE_DIR + 'JpegCompressTest-stub', NATIVE_DIR + 'StubJpegCompressTest.c', CCFLAGS=STUB_CCFLAGS)
libjpegStub = SharedLibrary(STUB_NATIVE_LIBS + "libjpegt.so", tJpeg, LINKFLAGS=LIBROBUSTA_INCLUDE)

###############################
# The haru pdf library
PDF_SRC_ROOT = "src/hpdf/"
NATIVE_DIR = PDF_SRC_ROOT + "native/"

#pdf_env = Environment(CPPFLAGS=["-DHAVE_CONFIG_H", "-DHPDF_DEBUG_TRACE", "-I" + NATIVE_DIR + "libharu-2.1.0/include", "-I/usr/include"], LIBPATH=["./lib/normal/"],LINKFLAGS=["-ltestzip","-Wl,-rpath=./lib/normal"]);

pdf_env = normal.Clone();
pdf_env.Append(CPPFLAGS=["-DHAVE_CONFIG_H", "-I" + NATIVE_DIR + "libharu-2.1.0/include", "-I/usr/include"], LIBPATH=["./lib/normal/"],LINKFLAGS=["-lz","-Wl,-rpath,./lib/normal/"]);

#nacl_pdf_env = naclSDKEnv.Clone(CCFLAGS = ["-DHAVE_CONFIG_H", "-I" + NATIVE_DIR + "libharu-2.1.0/include", "-I/usr/include", '-I' + JDK_INCLUDE, '-I' + JDK_INCLUDE_LINUX], LIBPATH=[], LINKFLAGS=["-lz","-Wl,-rpath,./lib/sandboxed/", DYN_NACL_LINKFLAGS]);

nacl_pdf_env = naclSDKEnv.Clone(CCFLAGS = ["-DHAVE_CONFIG_H", "-I" + NATIVE_DIR + "libharu-2.1.0/include", "-I/usr/include", '-I' + JDK_INCLUDE, '-I' + JDK_INCLUDE_LINUX]);

stub_pdf_env = normal.Clone();
stub_pdf_env.Append(CCFLAGS=[STUB_CCFLAGS]);

pdf_obj_list = Split("""hpdf_annotation hpdf_array hpdf_binary hpdf_boolean hpdf_catalog hpdf_destination hpdf_dict hpdf_doc hpdf_doc_png hpdf_encoder hpdf_encoder_cns hpdf_encoder_cnt hpdf_encoder_jp hpdf_encoder_kr hpdf_encrypt hpdf_encryptdict hpdf_error hpdf_ext_gstate hpdf_font hpdf_font_cid hpdf_fontdef_base14 hpdf_fontdef hpdf_fontdef_cid hpdf_fontdef_cns hpdf_fontdef_cnt hpdf_fontdef_jp hpdf_fontdef_kr hpdf_fontdef_tt hpdf_fontdef_type1 hpdf_font_tt hpdf_font_type1 hpdf_gstate hpdf_image hpdf_image_png hpdf_info hpdf_list hpdf_mmgr hpdf_name hpdf_null hpdf_number hpdf_objects hpdf_outline hpdf_page_label hpdf_page_operator hpdf_pages hpdf_real hpdf_streams hpdf_string hpdf_u3d hpdf_utils hpdf_xref""");

pdf_bind_list = Split("""HPdfDoc HPdfPage HPdfDestination HPdfImage""");

pdf_stub_bind_list = ["StubHPdfDoc", "StubHPdfPage", "StubHPdfDestination", "StubHPdfImage"];

libpdf = pdf_env.SharedLibrary(NORMAL_NATIVE_LIBS + "libpdf.so", [gen_list(pdf_env, pdf_bind_list, NATIVE_DIR, "-normal", ".c"), gen_list(pdf_env, pdf_obj_list, NATIVE_DIR + "./libharu-2.1.0/src/", "-normal", ".c")]);

libpdfSand = nacl_pdf_env.SharedLibrary(SANDBOXED_NATIVE_LIBS + "libpdf.so", [gen_list(nacl_pdf_env, pdf_bind_list, NATIVE_DIR, "-sandboxed", ".c"), gen_list(nacl_pdf_env, pdf_obj_list, NATIVE_DIR + "./libharu-2.1.0/src/", "-sandboxed", ".c")], LINKFLAGS=["-L./lib/sandboxed/", "-lzt","-Wl,-rpath,./lib/sandboxed/", DYN_NACL_LINKFLAGS]);

libpdfStub = stub_pdf_env.SharedLibrary(STUB_NATIVE_LIBS + "libpdf.so", [gen_list(stub_pdf_env, pdf_stub_bind_list, NATIVE_DIR, "-stub", ".c")], LINKFLAGS=[LIBROBUSTA_INCLUDE]);

###############################
#All run targets (redirect output to 'run.out')

MARK_SANDBOXED = "./marksandboxed.sh " + SANDBOXED_NATIVE_LIBS + "; "
LD_LIBRARY_PATH_SANDBOXED = "LD_LIBRARY_PATH=" + SANDBOXED_NATIVE_LIBS
LD_LIBRARY_PATH_NORMAL = "LD_LIBRARY_PATH=" + NORMAL_NATIVE_LIBS
JVM_ROBUSTA = JAVA_BIN_BUILD_DIR + "java "

#The Hello World test library
#Build and run (sandboxed)
PhonyTarget(env, "Hw-s", [HelloWorldJava, libHelloWorldSand], MARK_SANDBOXED + LD_LIBRARY_PATH_SANDBOXED + JVM_ROBUSTA + "HelloWorld");

PhonyTarget(env, "Hw-n", [HelloWorldJava, libHelloWorld], LD_LIBRARY_PATH_NORMAL +  "java HelloWorld");

PhonyTarget(env, "libs-usand", [libBlank, libHelloWorld, libParamPass, libJNIWrap, libCallbacks, libFieldAccess, libStaticFieldAccess, libArray, libObjectArray, libCatchThrow, libMonitorCounter, libFileAccess, libtestzip, libmath, libec, libjpeg, libz, libpdf], "");

#Build all libaries
PhonyTarget(env, "libs", [libBlank, libBlankSand, libBlankStub, libHelloWorld, libHelloWorldSand, libHelloWorldStub, libMultHelloWorld1Sand, libMultHelloWorld2Sand, libMultHelloWorld1, libMultHelloWorld2, libMultHelloWorld1Stub, libMultHelloWorld2Stub, libParamPass, libParamPassSand, libParamPassStub, libJNIWrap, libJNIWrapSand, libJNIWrapStub, libCallbacks, libCallbacksSand, libCallbacksStub, libFieldAccess, libFieldAccessSand, libFieldAccessStub, libStaticFieldAccess, libStaticFieldAccessSand, libStaticFieldAccessStub, libArray, libArraySand, libArrayStub, libObjectArray, libObjectArraySand, libObjectArrayStub, libCatchThrow, libCatchThrowSand, libCatchThrowStub, libMonitorCounter, libMonitorCounterSand, libMonitorCounterStub, libJNIOnload, libJNIOnloadSand, libJNIOnloadStub, libFileAccess, libFileAccessSand, libFileAccessStub, libtestzip, libtestzipSand, libtestzipStub, libtestzipjdkSand, libmath, libmathSand, libmathStub, libjpeg, libjpegSand, libjpegStub, libpdf, libpdfSand, libpdfStub, ], "");

Default(libHelloWorld)
